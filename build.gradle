buildscript {
    version "7.1.0"
    group "au.org.ala"
}

plugins {
    id "groovy"
    id "org.grails.grails-gsp"
    id "org.grails.grails-web"
    id "war"
    id "idea"
    id "com.bertramlabs.asset-pipeline"
    id "com.github.erdi.webdriver-binaries" version "3.0"
    id "eclipse"

    id "maven-publish"
}

//ext {
//    // The drivers we want to use
//    drivers = ["firefox", "chrome", "chromeHeadless"]
//
//    ext {
//        gebVersion = '2.3'
//        seleniumVersion = '4.0.0'
//        chromeDriverVersion = '2.44'
//        geckoDriverVersion = '0.26.0'
//    }
//}

repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

bootWar {
    launchScript()
    dependsOn(compileGroovyPages)
}

war {
    dependsOn(compileGroovyPages)
}

// Set to true it needed only for development
boolean inplace = false

if (inplace) {
    grails {
        exploded = true
        plugins {
            implementation project(':biocache-hubs')
            implementation project(':downloads-plugin')
//            compile project(':ala-charts-plugin')
//            compile project(':images-client-plugin')
            implementation "org.grails.plugins:ala-bootstrap3:4.1.0", {
                exclude group: 'au.org.ala', module: 'ala-cas-client'
            }
        }
    }
}

dependencies {
    def noCache = {
        exclude group: 'org.grails.plugins', module: 'cache'
        exclude group: 'org.ehcache', module: 'ehcache'
        exclude group: 'org.grails.plugins', module: 'cache-ehcache'
    }

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
//    implementation "org.grails.plugins:cache:5.0.0-ALA:ALA"
//    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:cache:5.0.1-ALA"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"

    implementation "org.slf4j:log4j-over-slf4j"

    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly 'org.ehcache:ehcache'
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.4.7"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
//    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
//    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"

    // Jars
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'xml-apis:xml-apis:1.4.01'

    if (!inplace) {
        implementation "au.org.ala.plugins.grails:biocache-hubs:7.1.0", noCache
        implementation "au.org.ala.plugins.grails:downloads-plugin:5.0.0", noCache
        implementation "org.grails.plugins:ala-bootstrap3:4.4.0", {
            exclude group: 'au.org.ala', module: 'ala-cas-client'
        }
    }
}

//webdriverBinaries {
//    chromedriver "$chromeDriverVersion"
//    geckodriver "$geckoDriverVersion"
//}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}


tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

//tasks.withType(Test) {
//    systemProperty "geb.env", System.getProperty('geb.env')
//    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
//    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
//    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
//}


assets {
    minifyJs = true
    minifyCss = true
}

bootJar {
    enabled = true
    classifier = 'exec'
    launchScript()
}

assemble {
    dependsOn bootJar
}

bootWar {
    enabled = false
}

publish {
    dependsOn assemble
}

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {

            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            artifact bootJar
        }
    }
}

