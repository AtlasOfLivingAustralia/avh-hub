buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.4.7"
    }
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "chromeHeadless"]

    ext {
        gebVersion = '2.3'
        seleniumVersion = '3.14.0'
        chromeDriverVersion = '2.44'
        geckoDriverVersion = '0.26.0'
    }
}
// version updated to match biocache-hubs
version "6.0.0-SNAPSHOT"

group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"maven-publish"
apply from: "${project.projectDir}/gradle/publish.gradle"

repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

// Set to true it needed only for development
boolean inplace = false

if (inplace) {
    grails {
        exploded = true
        plugins {
            // When not inplace used, the dependencies below are managed by biocache-hubs plugin
            implementation project(':biocache-hubs'), {
                exclude group: 'org.grails.plugins', module: 'ala-ws-plugin'
            }
            implementation project(':downloads-plugin')
//            implementation project(':ala-charts-plugin')
//            implementation project(':images-client-plugin')
            implementation project(':ala-ws-plugin')
        }
    }
}

dependencies {
    def noCache = {
        exclude group: 'org.grails.plugins', module: 'cache'
        exclude group: 'org.ehcache', module: 'ehcache'
        exclude group: 'org.grails.plugins', module: 'cache-ehcache'
    }

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
//    implementation "org.grails.plugins:cache:5.0.0-ALA:ALA"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"

    implementation "org.slf4j:log4j-over-slf4j"

    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtimeOnly"org.glassfish.web:el-impl:2.1.2-b03"
    runtimeOnly"com.h2database:h2"
    runtimeOnly"org.apache.tomcat:tomcat-jdbc"
    runtimeOnly"javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.4.7"

    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:3.14.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:3.14.0"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

    // Jars
//    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'xml-apis:xml-apis:1.4.01'

    if (!inplace) {
        implementation "au.org.ala.plugins.grails:biocache-hubs:6.0.0-SNAPSHOT", noCache
        implementation "au.org.ala.plugins.grails:downloads-plugin:3.3-SNAPSHOT", noCache
    }
}

webdriverBinaries {
    chromedriver "$chromeDriverVersion"
    geckodriver "$geckoDriverVersion"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}


tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}


assets {
    minifyJs = true
    minifyCss = true
}

bootJar {
    enabled = true
    classifier = 'exec'
    launchScript()
}

assemble {
    dependsOn bootJar
}

bootWar {
    enabled = false
}

publish {
    dependsOn assemble
}


